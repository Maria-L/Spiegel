function Register(name) {

     this.name = name;

     this.tpe = "de.hawhamburg.csti.messaging.tunnel.Register";
}
Register.prototype.toJSON = function() {
     return {

         "name": this.name,

         "tpe": "de.hawhamburg.csti.messaging.tunnel.Register"
     }
}

function RegisterAck(name, agentId) {

     this.name = name;

     this.agentId = agentId;

     this.tpe = "de.hawhamburg.csti.messaging.tunnel.RegisterAck";
}
RegisterAck.prototype.toJSON = function() {
     return {

         "name": this.name,

         "agentId": this.agentId,

         "tpe": "de.hawhamburg.csti.messaging.tunnel.RegisterAck"
     }
}

function Subscribe(group, agentId) {

     this.group = group;

     this.agentId = agentId;

     this.tpe = "de.hawhamburg.csti.messaging.tunnel.Subscribe";
}
Subscribe.prototype.toJSON = function() {
     return {

         "group": this.group,

         "agentId": this.agentId,

         "tpe": "de.hawhamburg.csti.messaging.tunnel.Subscribe"
     }
}

function SubscribeAck(group, agentId) {

     this.group = group;

     this.agentId = agentId;

     this.tpe = "de.hawhamburg.csti.messaging.tunnel.SubscribeAck";
}
SubscribeAck.prototype.toJSON = function() {
     return {

         "group": this.group,

         "agentId": this.agentId,

         "tpe": "de.hawhamburg.csti.messaging.tunnel.SubscribeAck"
     }
}

function Unsubscribe(group, agentId) {

     this.group = group;

     this.agentId = agentId;

     this.tpe = "de.hawhamburg.csti.messaging.tunnel.Unsubscribe";
}
Unsubscribe.prototype.toJSON = function() {
     return {

         "group": this.group,

         "agentId": this.agentId,

         "tpe": "de.hawhamburg.csti.messaging.tunnel.Unsubscribe"
     }
}

function UnsubscribeAck(group, agentId) {

     this.group = group;

     this.agentId = agentId;

     this.tpe = "de.hawhamburg.csti.messaging.tunnel.UnsubscribeAck";
}
UnsubscribeAck.prototype.toJSON = function() {
     return {

         "group": this.group,

         "agentId": this.agentId,

         "tpe": "de.hawhamburg.csti.messaging.tunnel.UnsubscribeAck"
     }
}

function Publish(group, senderId, msg) {

     this.group = group;

     this.senderId = senderId;

     this.msg = msg;

     this.tpe = "de.hawhamburg.csti.messaging.tunnel.Publish";
}
Publish.prototype.toJSON = function() {
     return {

         "group": this.group,

         "senderId": this.senderId,

         "msg": this.msg,

         "tpe": "de.hawhamburg.csti.messaging.tunnel.Publish"
     }
}




var TunnelDeserializer = new function() {
     var transform = function(data, deser, paramInfo) {
         var re = {};
         var paramNum = 0;
         Object.keys(data).forEach(function(k) {
             var value = data[k];
             var tpeInfo = paramInfo[k];

             if (Array.isArray(value)) {
                 if(tpeInfo.startsWith("Seq")) {
                     var expectedTpe = tpeInfo.substring(4, tpeInfo.length - 1)
                     value = data[k].map(function(val) {
                         if(typeof val === 'object')
                             return RuntimeDeserializer.deserialize(val, expectedTpe);
                         else return val;
                     });
                 } else {
                     console.log("ERROR: can not deserialize message. Expected Sequence, was " + value)
                 }
             } else if(typeof value === 'object') {
                 value = deser.deserialize(value, tpeInfo);
             }
             re[k] = {
                 writable: false,
                 configurable: false,
                 value: value
             };
             paramNum += 1;
         });
         return re;
     }

     this.deserialize = function(json, expectedTpe) {

         if(json.tpe === "de.hawhamburg.csti.messaging.tunnel.Register" || expectedTpe === "de.hawhamburg.csti.messaging.tunnel.Register")
             return this.deserializeRegister(json);

         if(json.tpe === "de.hawhamburg.csti.messaging.tunnel.RegisterAck" || expectedTpe === "de.hawhamburg.csti.messaging.tunnel.RegisterAck")
             return this.deserializeRegisterAck(json);

         if(json.tpe === "de.hawhamburg.csti.messaging.tunnel.Subscribe" || expectedTpe === "de.hawhamburg.csti.messaging.tunnel.Subscribe")
             return this.deserializeSubscribe(json);

         if(json.tpe === "de.hawhamburg.csti.messaging.tunnel.SubscribeAck" || expectedTpe === "de.hawhamburg.csti.messaging.tunnel.SubscribeAck")
             return this.deserializeSubscribeAck(json);

         if(json.tpe === "de.hawhamburg.csti.messaging.tunnel.Unsubscribe" || expectedTpe === "de.hawhamburg.csti.messaging.tunnel.Unsubscribe")
             return this.deserializeUnsubscribe(json);

         if(json.tpe === "de.hawhamburg.csti.messaging.tunnel.UnsubscribeAck" || expectedTpe === "de.hawhamburg.csti.messaging.tunnel.UnsubscribeAck")
             return this.deserializeUnsubscribeAck(json);

         if(json.tpe === "de.hawhamburg.csti.messaging.tunnel.Publish" || expectedTpe === "de.hawhamburg.csti.messaging.tunnel.Publish")
             return this.deserializePublish(json);

     };


     this.deserializeRegister = function (data) {
         return Object.create(Register.prototype, transform(data, this, {"name": "String"}));
     };

     this.deserializeRegisterAck = function (data) {
         return Object.create(RegisterAck.prototype, transform(data, this, {"name": "String", "agentId": "String"}));
     };

     this.deserializeSubscribe = function (data) {
         return Object.create(Subscribe.prototype, transform(data, this, {"group": "String", "agentId": "String"}));
     };

     this.deserializeSubscribeAck = function (data) {
         return Object.create(SubscribeAck.prototype, transform(data, this, {"group": "String", "agentId": "String"}));
     };

     this.deserializeUnsubscribe = function (data) {
         return Object.create(Unsubscribe.prototype, transform(data, this, {"group": "String", "agentId": "String"}));
     };

     this.deserializeUnsubscribeAck = function (data) {
         return Object.create(UnsubscribeAck.prototype, transform(data, this, {"group": "String", "agentId": "String"}));
     };

     this.deserializePublish = function (data) {
         return Object.create(Publish.prototype, transform(data, this, {"group": "String", "senderId": "String", "msg": "String"}));
     };

};

var NoDeserializer = new function() {
     this.deserialize = function(json) {
         return json;
     }
}

function Subscription() {
}
Subscription.prototype.unsubscribe = function() {
     throw new Error("Abstract method!");
}

function MiddlewareConnector(socketAddress) {
     var ready = false;
     var waiting = [];
     var subscriptions = [];
     var self = this;
     var id = null;

     this.publish = function(group, msg) {
         console.log(group + " -" + JSON.stringify(msg))
         if(id && ready) sendObj(new Publish(group, id, 
JSON.stringify(msg))); //TODO
     }

     this.subscribe = function(group, deser, callback) {
         var data = {
             group: group,
             deser: deser,
             callback: callback
         };
         subscriptions.push(data);
         if(id && ready) {
             sendObj(new Subscribe(group, id)); //TODO
         } else waiting.push(data);

         return {
             "unsubscribe": function() {
                 var index = -1;
                 //remove group from waiting list
                 index = waiting.indexOf(new Subscribe(group, id));
                 console.log("unsubscribe: " + index);
                 if(index > -1) {
                     waiting.splice(index, 1)
                 }

                 //remove subscription
                 index = subscriptions.indexOf(data);
                 console.log("unsubscribe: " + index);
                 if(index > -1) {
                     subscriptions.splice(index, 1)
                 }
                 if(ready) {
                     //send unsubscribe
                     sendObj(new Unsubscribe(group, id)); //TODO
                 } //else TODO
             }
         }
     }

     var sendObj = function(obj) {
         websocket.send(JSON.stringify(obj));
     }

     var websocket = new WebSocket(socketAddress);
     websocket.onmessage = function(evt) {
         var obj = JSON.parse(evt.data);
         if(obj.tpe === "de.hawhamburg.csti.messaging.tunnel.RegisterAck") {
             console.log("register ack: " + obj.name + " / " + obj.agentId);
             id = obj.agentId
         } else {
             //TODO: check tpe
             for (var i = 0; i < subscriptions.length; i++) {
                 var sub = subscriptions[i];
                 if (sub.group === obj.group) {
                     var innerMsg = JSON.parse(obj.msg);
                     sub.callback(sub.deser.deserialize(innerMsg));
                 }
             }
         }
     }
     websocket.onopen = function() {
         ready = true;
         sendObj(new Register("middleware-web"))
         setInterval(function() {
             for (var i = 0; i < waiting.length; i++) {
                 var w = waiting[i];
                 sendObj(new Subscribe(w.group, id));
             }
         }, 1000);
     }
     websocket.onclose = function() {
         if(ready) console.error("connection lost");
         ready = false;
     }
}